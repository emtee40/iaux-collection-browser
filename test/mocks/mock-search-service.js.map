{"version":3,"file":"mock-search-service.js","sourceRoot":"","sources":["../../../test/mocks/mock-search-service.ts"],"names":[],"mappings":"AAQA,OAAO,EAAE,mBAAmB,EAAE,MAAM,yBAAyB,CAAC;AAE9D,MAAM,OAAO,iBAAiB;IAG5B,KAAK,CAAC,MAAM,CACV,MAAoB;QAEpB,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC;QAC3B,OAAO,mBAAmB,CAAC;IAC7B,CAAC;IAED,KAAK,CAAC,aAAa,CACjB,UAAkB;QAElB,OAAO,CAAC,KAAK,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;QAC3C,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,KAAK,CAAC,kBAAkB,CACtB,UAAkB,EAClB,OAAe;QAEf,OAAO,CAAC,KAAK,CAAC,oBAAoB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;QACzD,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;CACF","sourcesContent":["import { Result } from '@internetarchive/result-type';\nimport {\n  MetadataResponse,\n  SearchParams,\n  SearchResponse,\n  SearchServiceInterface,\n  SearchServiceError,\n} from '@internetarchive/search-service';\nimport { mockSuccessResponse } from './mock-search-responses';\n\nexport class MockSearchService implements SearchServiceInterface {\n  searchParams?: SearchParams;\n\n  async search(\n    params: SearchParams\n  ): Promise<Result<SearchResponse, SearchServiceError>> {\n    this.searchParams = params;\n    return mockSuccessResponse;\n  }\n\n  async fetchMetadata(\n    identifier: string\n  ): Promise<Result<MetadataResponse, SearchServiceError>> {\n    console.debug('fetchMetadata', identifier);\n    throw new Error('Method not implemented.');\n  }\n\n  async fetchMetadataValue<T>(\n    identifier: string,\n    keypath: string\n  ): Promise<Result<T, SearchServiceError>> {\n    console.debug('fetchMetadataValue', identifier, keypath);\n    throw new Error('Method not implemented.');\n  }\n}\n"]}