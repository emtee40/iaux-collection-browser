{"version":3,"file":"language-code-handler.js","sourceRoot":"","sources":["../../../src/language-code-handler/language-code-handler.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,yBAAyB,CAAC;AAqC5D,MAAM,OAAO,mBAAmB;IAAhC;QACU,cAAS,GAAG,GAAG,CAAC;IAyB1B,CAAC;IAvBC,kBAAkB;IAClB,6BAA6B,CAAC,aAAqB;QACjD,MAAM,KAAK,GAAG,IAAI,CAAC,0BAA0B,CAAC,aAAa,CAAC,CAAC;QAC7D,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,EAAE,CAAC;QAClC,MAAM,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QAC9B,MAAM,YAAY,GAAG,iBAAiB,CAAC,YAAY,CAAC,CAAC;QACrD,OAAO,YAAY,aAAZ,YAAY,cAAZ,YAAY,GAAI,aAAa,CAAC;IACvC,CAAC;IAED,kBAAkB;IAClB,6BAA6B,CAAC,YAAoB;QAChD,MAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,MAAM,CACzD,IAAI,CAAC,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,YAAY,CACjD,CAAC;QACF,MAAM,gBAAgB,GAAG,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC7D,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAED,kBAAkB;IAClB,0BAA0B,CAAC,aAAqB;QAC9C,MAAM,KAAK,GAAG,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAClD,OAAO,KAAK,CAAC;IACf,CAAC;CACF","sourcesContent":["import { codeToLanguageMap } from './language-code-mapping';\n\n// To serialize the list of potential language codes, we store\n// the string in the format `en-us|en|en-gb` with `|` being the separator.\n// This allows us to generate a query of `language:(en-us OR en OR en-gb)`\n// when we deserialize the string.\nexport interface LanguageCodeHandlerInterface {\n  /**\n   * This takes a list of codes in the format `en-us|en|en-gb` and\n   * returns the first language code in the list.\n   *\n   * The codes in the string should always represent the same language name.\n   * eg `en-us`, `en-gb`, and `en` should always be \"English\"\n   *\n   * @param languageCodes\n   */\n  getLanguageNameFromCodeString(languageCodes: string): string;\n\n  /**\n   * This creates a serialized string of language codes for the given language.\n   *\n   * eg. `English` becomes `en-us|en|en-gb|.....`\n   *\n   * @param languageName\n   */\n  getCodeStringFromLanguageName(languageName: string): string;\n\n  /**\n   * Get an array of langauge codes from a serialized string.\n   *\n   * eg. `en-us|en|en-gb` becomes `['en-us', 'en', 'en-gb']`\n   *\n   * @param languageCodes\n   */\n  getCodeArrayFromCodeString(languageCodes: string): string[];\n}\n\nexport class LanguageCodeHandler implements LanguageCodeHandlerInterface {\n  private delimeter = '|';\n\n  /** @inheritdoc */\n  getLanguageNameFromCodeString(languageCodes: string): string {\n    const split = this.getCodeArrayFromCodeString(languageCodes);\n    if (split.length === 0) return '';\n    const languageCode = split[0];\n    const languageName = codeToLanguageMap[languageCode];\n    return languageName ?? languageCodes;\n  }\n\n  /** @inheritdoc */\n  getCodeStringFromLanguageName(languageName: string): string {\n    const languageCodes = Object.keys(codeToLanguageMap).filter(\n      code => codeToLanguageMap[code] === languageName\n    );\n    const stringifiedCodes = languageCodes?.join(this.delimeter);\n    return stringifiedCodes;\n  }\n\n  /** @inheritdoc */\n  getCodeArrayFromCodeString(languageCodes: string): string[] {\n    const split = languageCodes.split(this.delimeter);\n    return split;\n  }\n}\n"]}