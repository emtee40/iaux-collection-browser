{"version":3,"file":"models.js","sourceRoot":"","sources":["../../src/models.ts"],"names":[],"mappings":"AA0CA;;GAEG;AACH,MAAM,CAAN,IAAY,SASX;AATD,WAAY,SAAS;IACnB,oCAAyB,CAAA;IACzB,4BAAiB,CAAA;IACjB,4BAAiB,CAAA;IACjB,0CAA+B,CAAA;IAC/B,0BAAe,CAAA;IACf,0CAA+B,CAAA;IAC/B,oCAAyB,CAAA;IACzB,gCAAqB,CAAA;AACvB,CAAC,EATW,SAAS,KAAT,SAAS,QASpB;AAcD,MAAM,CAAC,MAAM,oBAAoB,GAE7B;IACF,SAAS,EAAE,WAAW;IACtB,KAAK,EAAE,OAAO;IACd,KAAK,EAAE,OAAO;IACd,YAAY,EAAE,eAAe;IAC7B,IAAI,EAAE,gBAAgB;IACtB,YAAY,EAAE,eAAe;IAC7B,SAAS,EAAE,YAAY;IACvB,OAAO,EAAE,SAAS;CACnB,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,wBAAwB,GAEjC;IACF,SAAS,EAAE,IAAI;IACf,KAAK,EAAE,MAAM;IACb,KAAK,EAAE,aAAa;IACpB,YAAY,EAAE,YAAY;IAC1B,IAAI,EAAE,MAAM;IACZ,YAAY,EAAE,YAAY;IAC1B,SAAS,EAAE,WAAW;IACtB,OAAO,EAAE,eAAe;CACzB,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,wBAAwB,GAEjC;IACF,WAAW,EAAE,SAAS,CAAC,KAAK;IAC5B,IAAI,EAAE,SAAS,CAAC,IAAI;IACpB,UAAU,EAAE,SAAS,CAAC,YAAY;IAClC,UAAU,EAAE,SAAS,CAAC,YAAY;IAClC,SAAS,EAAE,SAAS,CAAC,SAAS;IAC9B,aAAa,EAAE,SAAS,CAAC,OAAO;IAChC,IAAI,EAAE,SAAS,CAAC,KAAK;CACtB,CAAC;AAmCF,MAAM,CAAC,MAAM,qBAAqB,GAAmB;IACnD,OAAO,EAAE,EAAE;IACX,SAAS,EAAE,EAAE;IACb,QAAQ,EAAE,EAAE;IACZ,OAAO,EAAE,EAAE;IACX,UAAU,EAAE,EAAE;IACd,IAAI,EAAE,EAAE;CACT,CAAC","sourcesContent":["import type { MediaType } from '@internetarchive/field-parsers';\n\nexport interface TileModel {\n  averageRating?: number;\n  collectionIdentifier?: string;\n  collectionName?: string;\n  collections: string[];\n  commentCount: number;\n  creator?: string;\n  creators: string[];\n  dateAdded?: Date; // Date added to public search (software-defined) [from: addeddate]\n  dateArchived?: Date; // Date archived (software-defined) item created on archive.org [from: publicdate]\n  datePublished?: Date; // Date work published in the world (user-defined) [from: date]\n  dateReviewed?: Date; // Date reviewed (user-created) most recent review [from: reviewdate]\n  description?: string;\n  favCount: number;\n  identifier: string;\n  issue?: string;\n  itemCount: number;\n  mediatype: MediaType;\n  source?: string;\n  subjects: string[];\n  title: string;\n  viewCount: number;\n  volume?: string;\n}\n\nexport type CollectionDisplayMode = 'grid' | 'list-compact' | 'list-detail';\n\nexport type TileDisplayMode =\n  | 'grid'\n  | 'list-compact'\n  | 'list-detail'\n  | 'list-header';\n\n/**\n * This is mainly used to set the cookies for the collection display mode.\n *\n * It allows the user to set different modes for different contexts (collection page, search page, etc).\n */\nexport type CollectionBrowserContext = 'collection' | 'search';\n\n/**\n * The sort fields shown in the sort filter bar\n */\nexport enum SortField {\n  'relevance' = 'relevance',\n  'views' = 'views',\n  'title' = 'title',\n  'datearchived' = 'datearchived',\n  'date' = 'date',\n  'datereviewed' = 'datereviewed',\n  'dateadded' = 'dateadded',\n  'creator' = 'creator',\n}\n\n/**\n * The metadata fields we sort by that map to the SortFields above\n */\nexport type MetadataSortField =\n  | 'week'\n  | 'titleSorter'\n  | 'date'\n  | 'creatorSorter'\n  | 'publicdate'\n  | 'reviewdate'\n  | 'addeddate';\n\nexport const SortFieldDisplayName: {\n  [key in SortField]: string;\n} = {\n  relevance: 'Relevance',\n  views: 'Views',\n  title: 'Title',\n  datearchived: 'Date Archived',\n  date: 'Date Published',\n  datereviewed: 'Date Reviewed',\n  dateadded: 'Date Added',\n  creator: 'Creator',\n};\n\n/**\n * Maps the SortField above to the corresponding Metadata field in the API.\n */\nexport const SortFieldToMetadataField: {\n  [key in SortField]: MetadataSortField | null;\n} = {\n  relevance: null,\n  views: 'week',\n  title: 'titleSorter',\n  datearchived: 'publicdate',\n  date: 'date',\n  datereviewed: 'reviewdate',\n  dateadded: 'addeddate',\n  creator: 'creatorSorter',\n};\n\n/**\n * Maps the Metadata field to the corresponding SortField field in the API.\n */\nexport const MetadataFieldToSortField: {\n  [key in MetadataSortField]: SortField;\n} = {\n  titleSorter: SortField.title,\n  date: SortField.date,\n  publicdate: SortField.datearchived,\n  reviewdate: SortField.datereviewed,\n  addeddate: SortField.dateadded,\n  creatorSorter: SortField.creator,\n  week: SortField.views,\n};\n\nexport type FacetOption =\n  | 'subject'\n  | 'mediatype'\n  | 'language'\n  | 'creator'\n  | 'collection'\n  | 'year';\n\nexport type SelectedFacetState = 'selected' | 'hidden';\n\nexport type FacetState = SelectedFacetState | 'none';\n\nexport interface FacetBucket {\n  // for some facets, we augment the key with a display value\n  displayText?: string;\n  key: string;\n  count: number;\n  state: FacetState;\n}\n\nexport interface FacetGroup {\n  title: string;\n  key: FacetOption;\n  buckets: FacetBucket[];\n}\n\nexport type FacetValue = string;\n\nexport type SelectedFacets = Record<\n  FacetOption,\n  Record<FacetValue, SelectedFacetState>\n>;\n\nexport const defaultSelectedFacets: SelectedFacets = {\n  subject: {},\n  mediatype: {},\n  language: {},\n  creator: {},\n  collection: {},\n  year: {},\n};\n"]}